# Massive thanks to https://github.com/marketplace/actions/install-poetry-action
# Some more inspo for workflows could come from here
# https://github.com/LaurenceRawlings/python-poetry-cicd/tree/main/.github/workflows

# #8: take a look at https://github.com/actions/cache/blob/main/caching-strategies.md#make-cache-read-only--reuse-cache-from-centralized-job
# for caching, or https://github.com/KyleKing/copier-template-tester/tree/main/.github,
# particularly their use of an internal action for setup
name: CI

on:
  pull_request:
  push:
    branches: [main]
    tags: ['v*']

jobs:
  mypy:
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Load pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-mypy-pip
          restore-keys: ${{ runner.os }}-mypy-pip
      - name: Install mypy
        run: pip install mypy
      - name: mypy
        run: mypy src

  docs:
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          python-version: "3.9"
          venv-id: "docs"
          poetry-dependency-install-flags: "--all-extras --only 'main,docs'"
      - name: docs
        run: poetry run sphinx-build -W --keep-going -T -b html docs/source docs/build

  tests:
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest" ]
        python-version: [ "3.9", "3.10", "3.11" ]
    runs-on: "${{ matrix.os }}"
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          python-version: "${{ matrix.python-version }}"
          venv-id: "tests-${{ runner.os }}"
          poetry-dependency-install-flags: "--all-extras"
      - name: Run tests
        run: |
          poetry run pytest -r a -v src tests --doctest-modules --cov --cov-report=term-missing --cov-report=xml
          poetry run coverage report

      # #9: Upload code coverage if ubuntu with Python python_min_version

  imports-without-extras:
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest" ]
        python-version: [ "3.9", "3.10", "3.11" ]
    runs-on: "${{ matrix.os }}"
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          python-version: "${{ matrix.python-version }}"
          venv-id: "imports-without-extras-${{ runner.os }}"
          poetry-dependency-install-flags: "--only main"
      - name: Check importable without extras
        run: poetry run python scripts/test-install.py

  check-build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - uses: ./.github/actions/setup
        with:
          python-version: "3.9"
          venv-id: "check-build-${{ runner.os }}"
          run-poetry-install: false
          poetry-dependency-install-flags: "not used"
      - name: Build package
        run: |
          poetry build --no-interaction
      - name: Check build
        run: |
          tar -tvf dist/carpet_concentrations-*.tar.gz --wildcards '*carpet_concentrations/py.typed'

  check-commit-messages:
    if: "${{ !github.event.pull_request.draft }}"
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Load pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-check-commits-pip
          restore-keys: ${{ runner.os }}-check-commits-pip
      - name: Install commitizen
        run: pip install commitizen
      - name: Check commits
        # If you only want to check a certain range (e.g. we
        # have old commits we don't want to re-write), this
        # can be changed to
        # run: cz check --rev-range <commit-to-start-from-sha>..HEAD
        run: cz check --rev-range HEAD
